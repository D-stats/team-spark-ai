name: Deploy to Dev Environment

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name to build from'
        required: true
        default: 'main'
        type: string
      tag:
        description: 'Docker image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string

env:
  PROJECT_ID: d-stats-tsa
  REGION: asia-northeast1
  SERVICE_NAME: tsa-app
  REPOSITORY: cloud-run-source-deploy

jobs:
  # Build and deploy for both PR testing and manual triggers
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.label.name, 'deploy to dev')

    permissions:
      contents: read
      id-token: write

    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.head_ref }}

      - name: Set deployment variables
        run: |
          echo "IMAGE_TAG=${{ github.event.inputs.tag || github.sha }}" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run lint
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Build application
        run: npm run build

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/752503730439/locations/global/workloadIdentityPools/github/providers/github-provider
          service_account: github-actions-team-spark-ai@d-stats-tsa.iam.gserviceaccount.com
          token_format: access_token

      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
          region: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Health check and summary
        run: |
          SERVICE_URL="${{ steps.deploy.outputs.url }}"
          echo "Service deployed to: $SERVICE_URL"

          echo "Waiting for service to be ready..."
          sleep 30
          curl -f $SERVICE_URL/api/health || exit 1
          echo "Health check passed!"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Dev environment deployment successful from branch '${{ github.event.inputs.branch }}': $SERVICE_URL"
          else
            echo "Dev environment deployment successful from PR branch '${{ github.head_ref }}': $SERVICE_URL"
          fi

      - name: Remove deploy label
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const labelName = 'deploy to dev';
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                name: labelName
              });
              console.log(`Successfully removed '${labelName}' label from PR #${context.payload.pull_request.number}`);
            } catch (error) {
              console.log(`Label '${labelName}' was not found or already removed: ${error.message}`);
            }
