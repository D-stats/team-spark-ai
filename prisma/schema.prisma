generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String            @id @default(cuid())
  name             String
  settings         Json              @default("{}")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  checkInTemplates CheckInTemplate[]
  competencies     Competency[]
  evaluationCycles EvaluationCycle[]
  objectives       Objective[]
  slackWorkspaces  SlackWorkspace[]
  surveys          Survey[]
  teams            Team[]
  users            User[]
  subscriptions    Subscription[]
  invoices         Invoice[]
}

model User {
  id                     String           @id @default(cuid())
  organizationId         String
  email                  String           @unique
  name                   String
  avatarUrl              String?
  role                   Role             @default(MEMBER)
  slackUserId            String?
  password               String?
  emailVerified          DateTime?
  isActive               Boolean          @default(true)
  lastActiveAt           DateTime?
  // Extended profile fields
  bio                    String?
  skills                 String[]         @default([])
  timezone               String?          @default("UTC")
  locale                 String?          @default("en")
  phoneNumber            String?
  linkedinUrl            String?
  githubUrl              String?
  twitterUrl             String?
  // Security and preferences
  twoFactorEnabled       Boolean          @default(false)
  twoFactorSecret        String?
  lastPasswordChange     DateTime?
  // Notification preferences
  emailNotifications     Boolean          @default(true)
  kudosNotifications     Boolean          @default(true)
  checkinReminders       Boolean          @default(true)
  surveyNotifications    Boolean          @default(true)
  teamUpdates            Boolean          @default(false)
  digestFrequency        DigestFrequency  @default(WEEKLY)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  checkIns               CheckIn[]
  evaluationsAsEvaluatee Evaluation[]     @relation("EvaluationEvaluatee")
  evaluationsAsEvaluator Evaluation[]     @relation("EvaluationEvaluator")
  evaluationsAsReviewer  Evaluation[]     @relation("EvaluationReviewer")
  keyResults             KeyResult[]      @relation("KeyResultOwner")
  receivedKudos          Kudos[]          @relation("ReceivedKudos")
  sentKudos              Kudos[]          @relation("SentKudos")
  objectives             Objective[]      @relation("ObjectiveOwner")
  okrCheckIns            OkrCheckIn[]
  surveyResponses        SurveyResponse[]
  managedTeams           Team[]           @relation("TeamManager")
  teamMemberships        TeamMember[]
  userSessions           UserSession[]
  loginHistory           LoginHistory[]
  organization           Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([email])
  @@index([slackUserId])
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String
  sessionToken String    @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  isActive     Boolean   @default(true)
  lastUsedAt   DateTime  @default(now())
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([isActive])
}

model LoginHistory {
  id         String    @id @default(cuid())
  userId     String
  ipAddress  String?
  userAgent  String?
  deviceInfo String?
  success    Boolean   @default(true)
  failReason String?
  loginAt    DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([loginAt])
  @@index([success])
}

model Team {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?
  managerId      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  objectives     Objective[]
  manager        User?        @relation("TeamManager", fields: [managerId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        TeamMember[]

  @@index([organizationId])
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model Kudos {
  id         String        @id @default(cuid())
  senderId   String
  receiverId String
  message    String
  category   KudosCategory
  points     Int           @default(1)
  isPublic   Boolean       @default(true)
  createdAt  DateTime      @default(now())
  receiver   User          @relation("ReceivedKudos", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User          @relation("SentKudos", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model CheckInTemplate {
  id             String           @id @default(cuid())
  organizationId String
  name           String
  description    String?
  frequency      CheckInFrequency @default(WEEKLY)
  questions      Json
  isActive       Boolean          @default(true)
  isDefault      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  checkIns       CheckIn[]
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([isActive])
}

model CheckIn {
  id         String          @id @default(cuid())
  userId     String
  createdAt  DateTime        @default(now())
  moodRating Int?
  answers    Json
  templateId String
  updatedAt  DateTime        @updatedAt
  template   CheckInTemplate @relation(fields: [templateId], references: [id])
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateId])
  @@index([createdAt])
}

model Survey {
  id             String           @id @default(cuid())
  organizationId String
  title          String
  description    String?
  questions      Json
  isActive       Boolean          @default(true)
  isAnonymous    Boolean          @default(false)
  frequency      SurveyFrequency?
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  responses      SurveyResponse[]

  @@index([organizationId])
  @@index([isActive])
}

model SurveyResponse {
  id        String   @id @default(cuid())
  surveyId  String
  userId    String?
  answers   Json
  createdAt DateTime @default(now())
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([surveyId])
  @@index([userId])
}

model SlackWorkspace {
  id             String       @id @default(cuid())
  organizationId String
  teamId         String       @unique
  teamName       String
  botUserId      String
  botAccessToken String
  appId          String
  installedAt    DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model Objective {
  id             String          @id @default(cuid())
  organizationId String
  title          String
  description    String?
  ownerType      ObjectiveOwner
  ownerUserId    String?
  ownerTeamId    String?
  parentId       String?
  cycle          OkrCycle
  year           Int
  status         ObjectiveStatus @default(DRAFT)
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  keyResults     KeyResult[]
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  ownerTeam      Team?           @relation(fields: [ownerTeamId], references: [id])
  ownerUser      User?           @relation("ObjectiveOwner", fields: [ownerUserId], references: [id])
  parent         Objective?      @relation("ObjectiveAlignment", fields: [parentId], references: [id])
  children       Objective[]     @relation("ObjectiveAlignment")

  @@index([organizationId])
  @@index([ownerUserId])
  @@index([ownerTeamId])
  @@index([parentId])
  @@index([cycle, year])
}

model KeyResult {
  id              String           @id @default(cuid())
  objectiveId     String
  title           String
  description     String?
  type            KeyResultType
  ownerId         String?
  startValue      Float?
  targetValue     Float?
  currentValue    Float?
  unit            String?
  milestoneStatus MilestoneStatus?
  progress        Float            @default(0)
  confidence      Float?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  objective       Objective        @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  owner           User?            @relation("KeyResultOwner", fields: [ownerId], references: [id])
  checkIns        OkrCheckIn[]

  @@index([objectiveId])
  @@index([ownerId])
}

model OkrCheckIn {
  id            String    @id @default(cuid())
  keyResultId   String
  userId        String
  previousValue Float?
  currentValue  Float?
  progress      Float
  confidence    Float?
  comment       String?
  blockers      String?
  createdAt     DateTime  @default(now())
  keyResult     KeyResult @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id])

  @@index([keyResultId])
  @@index([userId])
  @@index([createdAt])
}

model EvaluationCycle {
  id             String              @id @default(cuid())
  organizationId String
  name           String
  type           EvaluationCycleType
  startDate      DateTime
  endDate        DateTime
  status         CycleStatus         @default(DRAFT)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  evaluations    Evaluation[]
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  phases         EvaluationPhase[]

  @@index([organizationId])
  @@index([status])
}

model EvaluationPhase {
  id          String              @id @default(cuid())
  cycleId     String
  type        EvaluationPhaseType
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  order       Int
  isActive    Boolean             @default(true)
  cycle       EvaluationCycle     @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@unique([cycleId, order])
  @@index([cycleId])
}

model Evaluation {
  id                String             @id @default(cuid())
  cycleId           String
  evaluateeId       String
  evaluatorId       String
  type              EvaluationType
  status            EvaluationStatus   @default(DRAFT)
  overallRating     Int?
  overallComments   String?
  strengths         String?
  improvements      String?
  careerGoals       String?
  developmentPlan   String?
  submittedAt       DateTime?
  reviewedAt        DateTime?
  reviewedBy        String?
  isVisible         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  managerComments   String?
  sharedAt          DateTime?
  competencyRatings CompetencyRating[]
  cycle             EvaluationCycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  evaluatee         User               @relation("EvaluationEvaluatee", fields: [evaluateeId], references: [id])
  evaluator         User               @relation("EvaluationEvaluator", fields: [evaluatorId], references: [id])
  reviewer          User?              @relation("EvaluationReviewer", fields: [reviewedBy], references: [id])

  @@unique([cycleId, evaluateeId, evaluatorId, type])
  @@index([cycleId])
  @@index([evaluateeId])
  @@index([evaluatorId])
}

model CompetencyRating {
  id           String     @id @default(cuid())
  evaluationId String
  competencyId String
  rating       Int
  evidence     String?
  competency   Competency @relation(fields: [competencyId], references: [id])
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  @@unique([evaluationId, competencyId])
  @@index([evaluationId])
  @@index([competencyId])
}

model Competency {
  id             String             @id @default(cuid())
  organizationId String
  name           String
  description    String
  category       CompetencyCategory
  behaviors      String[]
  order          Int                @default(0)
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  ratings        CompetencyRating[]

  @@index([organizationId])
  @@index([category])
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum KudosCategory {
  TEAMWORK
  INNOVATION
  LEADERSHIP
  PROBLEM_SOLVING
  CUSTOMER_FOCUS
  LEARNING
  OTHER
}

enum SurveyFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  ADHOC
}

enum ObjectiveOwner {
  COMPANY
  TEAM
  INDIVIDUAL
}

enum OkrCycle {
  ANNUAL
  Q1
  Q2
  Q3
  Q4
}

enum ObjectiveStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum KeyResultType {
  METRIC
  MILESTONE
}

enum MilestoneStatus {
  NOT_STARTED
  IN_PROGRESS
  AT_RISK
  COMPLETED
  CANCELLED
}

enum EvaluationCycleType {
  ANNUAL
  SEMI_ANNUAL
  QUARTERLY
  MONTHLY
}

enum CycleStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum EvaluationPhaseType {
  SELF
  PEER
  MANAGER
  SKIP_LEVEL
  CALIBRATION
}

enum EvaluationType {
  SELF
  PEER
  MANAGER
  SKIP_LEVEL
  UPWARD
}

enum EvaluationStatus {
  DRAFT
  SUBMITTED
  REVIEWED
  APPROVED
  SHARED
}

enum CompetencyCategory {
  CORE
  LEADERSHIP
  TECHNICAL
  FUNCTIONAL
}

enum CheckInFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  CUSTOM
}

enum DigestFrequency {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
}

model Subscription {
  id              String            @id @default(cuid())
  organizationId  String
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean         @default(false)
  canceledAt      DateTime?
  trialStart      DateTime?
  trialEnd        DateTime?
  quantity        Int              @default(1)
  unitPrice       Decimal          @db.Decimal(10, 2)
  currency        String           @default("USD")
  billingInterval BillingInterval  @default(MONTHLY)
  paymentMethod   String?
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices        Invoice[]
  
  @@index([organizationId])
  @@index([status])
  @@index([nextPaymentDate])
}

model Invoice {
  id              String         @id @default(cuid())
  organizationId  String
  subscriptionId  String?
  invoiceNumber   String         @unique
  status          InvoiceStatus  @default(DRAFT)
  subtotal        Decimal        @db.Decimal(10, 2)
  tax             Decimal        @db.Decimal(10, 2) @default(0)
  total           Decimal        @db.Decimal(10, 2)
  currency        String         @default("USD")
  issuedAt        DateTime       @default(now())
  dueAt           DateTime
  paidAt          DateTime?
  periodStart     DateTime?
  periodEnd       DateTime?
  description     String?
  paymentMethod   String?
  pdfUrl          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription    Subscription?  @relation(fields: [subscriptionId], references: [id])
  lineItems       InvoiceLineItem[]
  
  @@index([organizationId])
  @@index([subscriptionId])
  @@index([status])
  @@index([dueAt])
}

model InvoiceLineItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  amount      Decimal  @db.Decimal(10, 2)
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId])
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  UNPAID
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}
